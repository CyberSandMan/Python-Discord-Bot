import discord
import os
import random
import logging
import json
from discord.ext import commands, tasks
from discord.utils import get
from random import choice
from itertools import cycle 


client = commands.Bot(command_prefix = '.')

# Background Tasks funcitonality

status = cycle(['Coding with Python', 'Python Programming'])

# Bot ready function

@client.event
async def on_ready():
    change_status.start()
    await client.change_presence(status=discord.Status.idle, activity=discord.Game('Python Programming.'))
    print('Bot is ready.')

# Background Tasks funcitonality Cont.

@tasks.loop(seconds=10)
async def change_status():
    await client.change_presence(activity=discord.Game(next(status)))

#Members Join

@client.event
async def on_member_join(member):
    print(f'{member} has joined a server.')

#Members Leave

@client.event
async def on_member_remove(member):
    print(f'{member} has left a server')

#Member Commands

@client.command(aliases=['8ball'])
async def _8ball(ctx, *, question):
    responses = ["It is certain.",
                "It is decidedly so.",
                "Without a doubt.",
                "Yes - definitely.",
                "You may rely on it.",
                "As I see it, yes.",
                "Most likely.",
                "Outlook good.",
                "Yes.",
                "Signs point to yes.",
                "Reply hazy, try again.",
                "Ask again later.",
                "Better not tell you now.",
                "Cannot predict now.",
                "Concentrate and ask again.",
                "Don't count on it.",
                "My reply is no.",
                "My sources say no.",
                "Outlook not so good.",
                "Very doubtful."]
    await ctx.send(f'Question: {question}\nAnswer: {random.choice(responses)}')
    
#Admin Commands

@client.command()
@commands.has_permissions(manage_messages=True)
async def clear(ctx, amount : int):
    clear = await ctx.send(amount)
    await ctx.channel.purge(limit = amount + 2 )
    await ctx.send(f'Deleted {amount} messages.')

# Lines 79 - 84 (as well as modified purge command above) include 'checks' such as below. This limits command access to authorized users

# This function allows you to specify it to a specific user - custom check instead of using roles - look to disable maybe and keep it in the code so you know it
def is_it_me(ctx):
    return ctx.author.id == 136886141629497346

@client.command()
@commands.check(is_it_me)
async def example(ctx):
    await ctx.send(f'Hi Im {ctx.author}')

@client.command()
async def kick(ctx, member : discord.Member, *, reason=None):
    await member.kick(reason=reason)

@client.command()
async def ban(ctx, member : discord.Member, *, reason=None):
    await member.ban(reason=reason)

# Cogs / Extension - This lets you code on other files simultaneously while the bot is running - no downtime when writting code

@client.command()
async def load(ctx, extension):
    client.load_extension(f'cogs.{extension}')

@client.command()
async def unload(ctx, extension):
    client.unload_extension(f'cogs.{extension}')

for filename in os.listdir('./cogs'): 
    if filename.endswith('.py'):
            client.load_extension(f'cogs.{filename[:-3]}')

# Errors Notification - since we're using the clear function, please reference line 71 in ADMIN COMMANDS section

@client.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        await ctx.send('Invalid command used.')

# To specify an error message corresponding to a specific command, it is as such below

@clear.error
async def clear_error(ctx, error):
    if isinstance(error, commands.MissingRequiredArgument):
            await ctx.send('Please specify an amount of messages to delete.')

# Server prefixes - NOTE: WE ARE USING JSON FOR THIS. For learning/beginner purposes its fine, but you want to use something different in the future (database, SQL)

def get_prefix(client, message):
    with open('prefixes.json', 'r') as f:
        prefixes = json.load(f)
    return prefixes[str(message.guild.id)]

client = commands.Bot(command_prefix = get_prefix)

@client.event
async def on_guild_join(guild):
    with open('prefixes.json,', 'r') as f:
        prefixes = json.load(f)
    
    prefixes[str(guild.id)] = '.'

    with open('prefixes.json', 'w') as f:
        json.dump(prefixes, f, indent=4)

@client.event
async def on_guild_remove(guild):
    with open('prefixes.json,', 'r') as f:
        prefixes = json.load(f)
    
    prefixes.pop(str(guild.id))

    with open('prefixes.json', 'w') as f:
        json.dump(prefixes, f, indent=4)

@client.command()
async def changeprefix(ctx, prefix):
    with open('prefixes.json,', 'r') as f:
        prefixes = json.load(f)
    
    refixes[str(ctx.guild.id)] = prefix

    with open('prefixes.json', 'w') as f:
        json.dump(prefixes, f, indent=4)

    await ctx.send(f'Prefix changed to: {prefix}')


client.run('NzU5MTU0NjI2NzI1MTUwNzgy.X25X1w.AN-il3EdRTn4dCoMK4vTY1_3V28')


